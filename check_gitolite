#!/bin/bash
#
# Gitolite nagios check to fsck all repositories
#
# Usage: check_gitolite user <git repos>
#
# Copyright: Michael Gebetsroither <michael@mgeb.org> (2013)
# License:   GPLv2

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

CHECK_NAME="check_gitolite"
CACHE_DIR="/var/cache/$CHECK_NAME"
CACHE_FILE=""
if [[ $MIN_REPOS == "" ]]; then
    MIN_REPOS=1
fi

die() {
    local prio_="$1"; shift
    echo "$CHECK_NAME - $@"
    exit $prio_
}

print_status() {
    local msg_="$1"
    echo "$CHECK_NAME $msg_ for gitolite:${user_} ($num_repos_) | num_repos=${num_repos_};$MIN_REPOS;$MIN_REPOS;$num_repos_;"
}

check_repos() {
    local repos_="$1"
    local out_="/dev/null"
    local nagios_ret_=0
    local log_=""
    local user_="`id -u -n`" || die $STATE_UNKNOWN "Could not get username"
    
    log_=`mktemp -t "${CHECK_NAME}_XXXXXXXXXXXX"` || die $STATE_UNKNOWN "Could not create tmp file"

    find "${repos_}" -type d -name '*.git' -print0 | \
        xargs -0r -n1 -i /bin/bash -c \
        "echo {} 1>&2; echo {} >>$log_; git --bare --git-dir={} fsck --strict --full 1>&2 || exit 1" >/dev/null
    local ret_=$?

    num_repos_="`wc -l $log_ |cut -f1 -d \ `"
    if [[ $ret_ == 0 ]]; then
        if (( $MIN_REPOS > 0 && $num_repos_ < $MIN_REPOS )); then
            print_status "WARNING - NO fsck errors but MISSING repos"
            nagios_ret_=$STATE_WARNING
        else
            print_status "OK - Git fsck run successfully"
            nagios_ret_=$STATE_OK
        fi
    else
        print_status "CRITICAL - Git fsck detected errors"
        nagios_ret_=$STATE_CRITICAL
    fi
    rm $log_
    exit $nagios_ret_
}

cached_check()
{
    CACHE_FILE="${CACHE_DIR}/$USER"
    CACHE_FILE_RET="${CACHE_DIR}/${USER}.ret"
    CACHE_FILE_NEW="${CACHE_DIR}/${USER}.new"
    UPDATE_CACHEFILE="true"
    STALE_CACHEFILE="false"

    # Check if cache file exists and is recent enough
    if [ -s "$CACHE_FILE" ] ; then
        local now_=$(date +%s)
        local mtime_=$(stat -c %Y "$CACHE_FILE")
        if (( $((now_ - mtime_)) <= $AGE )); then UPDATE_CACHEFILE="false"; fi
        if (( $((now_ - mtime_)) <= $MAX_AGE )); then
            cat "$CACHE_FILE"
            RET_="`cat $CACHE_FILE_RET|head -n1`"
        else
            STALE_CACHEFILE="true"
        fi
    fi

    # outdated cachefile and update process still not running, refresh cache file
    if [ "$UPDATE_CACHEFILE" = "true" -a ! -e "$CACHE_FILE_NEW" ] ; then
        (
            touch $CACHE_FILE_NEW
            su "$USER" "$PROG" >$CACHE_FILE_NEW
            ret_=$?
            if [[ $ret_ == "0" ]]; then
                mv -f $CACHE_FILE_NEW $CACHE_FILE
                echo "$ret_" >$CACHE_FILE_RET
            else
                rm -f $CACHE_FILE $CACHE_FILE_NEW $CACHE_FILE_RET
            fi
        ) & # <--- BACKGROUND
    fi

    if [[ $RET_ != "" ]]; then
        exit $RET_
    fi

    if [[ $STALE_CACHEFILE == "true" ]]; then
        die $STATE_UNKNOWN "stale cache file"
    else
        die $STATE_UNKNOWN "no cache file"
    fi
}


###
## MAIN
###

if [ ! -d $CACHE_DIR ]; then mkdir -p $CACHE_DIR || die $STATE_UNKNOWN "Could not create cache directory" ; fi

if [[ $# != 0 ]]; then
    cached_="false"
    # initial call
    if [[ $1 == "--cached" ]]; then
        cached_="true"
        AGE="$2"
        MAX_AGE="$3"
        shift; shift; shift
    fi
    if [[ $1 == "--min" ]]; then
        MIN_REPOS="$2"
        shift; shift
    fi
    USER="$1"
    PROG="$0"
    export GITOLITE_DIR="$2"
    export MIN_REPOS

    if [[ $cached_ == "true" ]]; then
        echo "$CHECK_NAME - CACHED CONTENT" >&2
        cached_check
    else
        su "$USER" "$PROG"
    fi
else
    # self call through su
    if [ `id -u` -eq 0 ]; then
        die $STATE_UNKNOWN "Running as root not supported!"
    fi

    check_repos "$GITOLITE_DIR"
fi
